{"version":3,"sources":["../index.js"],"names":["configure","$toggle","$unset","$splice","$removeAt","$push","$unshift","$pop","$shift","$sort","$remove","$swap","$assign","$set","$batch","updatePath","define","configs","separator","Array","prototype","arraySlice","slice","arrayShift","shift","arrayUnshift","unshift","arrayPush","push","arrayPop","pop","arraySplice","splice","arraySort","sort","newConfigs","Object","assign","Immutable","value","parent","path","children","childMap","modifier","args","call","arguments","actions","Error","job","Function","apply","newValue","concat","change","changed","length","clone","x","filter","child","split","reduce","current","props","prop","forEach","arrayOp","array","index","count","newItems","indexes","newArray","sorter","undefined","isPlainObject","val","constructor","items","indexOf","from","to","temp","obj","values","mergedObj","key","createSelectorProxy","context","proxy","Proxy","get","target","set","thisArg","action","backToParent","traversal","node","entries","pair","childFromPath","spec","keys","newChild","update","state","changes","root","specs","selector","__context__","batch","remove","toggle","unset","swap","removeAt","cloneIfPossible","callback","name","disableAutoClone"],"mappings":"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","file":"index.js","sourcesContent":["const configs = {\r\n  // for fast performance, we process dot as separator only\r\n  separator: \".\"\r\n};\r\n\r\nconst {\r\n  slice: arraySlice,\r\n  shift: arrayShift,\r\n  unshift: arrayUnshift,\r\n  push: arrayPush,\r\n  pop: arrayPop,\r\n  splice: arraySplice,\r\n  sort: arraySort\r\n} = Array.prototype;\r\n\r\nexport function configure(newConfigs) {\r\n  Object.assign(configs, newConfigs);\r\n}\r\n\r\nclass Immutable {\r\n  constructor(value, parent, path) {\r\n    this.parent = parent;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.children = [];\r\n    this.childMap = {};\r\n  }\r\n\r\n  apply(modifier) {\r\n    const args = arraySlice.call(arguments, 1);\r\n    if (typeof modifier === \"string\") {\r\n      if (modifier in actions) {\r\n        modifier = actions[modifier];\r\n      } else {\r\n        throw new Error(`No action '${modifier}'' defined`);\r\n      }\r\n    }\r\n\r\n    // is batch processing\r\n    if (modifier === $batch) {\r\n      for (let job of args) {\r\n        if (job instanceof Function) {\r\n          job = [job];\r\n        }\r\n        this.apply.apply(this, job);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    const newValue = modifier.apply(null, [this.value].concat(args));\r\n    if (newValue !== this.value) {\r\n      this.value = newValue;\r\n      this.change();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  change() {\r\n    // notify to parent that child value is changed\r\n    if (this.parent) {\r\n      this.parent.change();\r\n    }\r\n\r\n    // if this is parent, we must clone its value\r\n    if (!this.changed && this.children.length) {\r\n      this.changed = true;\r\n      this.value = clone(this.value);\r\n      for (let x of this.children) {\r\n        this.value[x.path] = x.value;\r\n      }\r\n    }\r\n\r\n    // update parent model\r\n    if (this.parent) {\r\n      this.parent.value[this.path] = this.value;\r\n    }\r\n  }\r\n\r\n  backToParent() {\r\n    // make sure child should be removed fron its parent\r\n    this.parent.children = this.parent.children.filter(x => x !== this);\r\n    delete this.parent.childMap[this.path];\r\n    return this.parent;\r\n  }\r\n\r\n  child(path) {\r\n    if (path in this.childMap) {\r\n      return this.childMap[path];\r\n    }\r\n    const child = new Immutable(this.value[path], this, path);\r\n    this.children.push(child);\r\n    this.childMap[path] = child;\r\n    return child;\r\n  }\r\n\r\n  childFromPath(path) {\r\n    return (path instanceof Array\r\n      ? path\r\n      : path.split(configs.separator)\r\n    ).reduce((parent, path) => parent.child(path), this);\r\n  }\r\n}\r\n\r\nexport function $toggle(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  if (!props.length) {\r\n    return !current;\r\n  }\r\n  const newValue = clone(current);\r\n  for (let prop of props) {\r\n    newValue[prop] = !newValue[prop];\r\n  }\r\n  return newValue;\r\n}\r\n\r\nexport function $unset(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  if (!current) return;\r\n  let newValue = current;\r\n  props.forEach(prop => {\r\n    if (prop in newValue) {\r\n      if (newValue === current) {\r\n        newValue = clone(current);\r\n      }\r\n      delete newValue[prop];\r\n    }\r\n  });\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction arrayOp(array, modifier) {\r\n  if (!array) {\r\n    array = [];\r\n  } else {\r\n    array = array.slice();\r\n  }\r\n  modifier(array);\r\n  return array;\r\n}\r\n\r\nexport function $splice(array, index, count) {\r\n  const newItems = arraySlice.call(arguments, 3);\r\n  if (newItems.length || count) {\r\n    return arrayOp(array, x =>\r\n      arraySplice.apply(x, [index, count].concat(newItems))\r\n    );\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $removeAt(array) {\r\n  const indexes = arraySlice.call(arguments, 1);\r\n  let newArray = array;\r\n  // remove from bottom to top\r\n  indexes.sort();\r\n  while (indexes.length) {\r\n    const index = indexes.pop();\r\n    if (index >= 0 && index < newArray.length) {\r\n      if (newArray === array) {\r\n        newArray = newArray.slice();\r\n      }\r\n      newArray.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  return newArray;\r\n}\r\n\r\nexport function $push(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayPush.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $unshift(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayUnshift.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $pop(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.pop());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $shift(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.shift());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $sort(array, sorter) {\r\n  return arrayOp(array, x => x.sort(sorter));\r\n}\r\n\r\nfunction clone(value) {\r\n  if (value instanceof Array) {\r\n    return value.slice();\r\n  }\r\n  if (value === null || value === undefined || isPlainObject(value)) {\r\n    return Object.assign({}, value);\r\n  }\r\n  return value;\r\n}\r\n\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === \"object\" && val.constructor === Object;\r\n\r\nexport function $remove(array) {\r\n  const items = arraySlice.call(arguments, 1);\r\n  const newArray = array.filter(x => items.indexOf(x) === -1);\r\n  return newArray.length === array.length ? array : newArray;\r\n}\r\n\r\nexport function $swap(current, from, to) {\r\n  const newValue = clone(current);\r\n  const temp = newValue[from];\r\n  newValue[from] = newValue[to];\r\n  newValue[to] = temp;\r\n  return newValue;\r\n}\r\n\r\nexport function $assign(obj) {\r\n  const values = arraySlice.call(arguments, 1);\r\n  if (values.length) {\r\n    let mergedObj = obj;\r\n    values.forEach(value => {\r\n      if (value === null || value === undefined) return;\r\n      for (let key in value) {\r\n        if (value[key] !== mergedObj[key]) {\r\n          if (mergedObj === obj) {\r\n            mergedObj = Object.assign({}, obj);\r\n          }\r\n          mergedObj[key] = value[key];\r\n        }\r\n      }\r\n    });\r\n    return mergedObj;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction createSelectorProxy(context) {\r\n  const proxy = new Proxy(x => undefined, {\r\n    get(target, prop) {\r\n      if (prop === \"__context__\") return context;\r\n      context = context.child(prop);\r\n      return proxy;\r\n    },\r\n    set(target, prop, value) {\r\n      context.apply($set, prop, value);\r\n      return proxy;\r\n    },\r\n    apply(target, thisArg, args) {\r\n      const action = context.path;\r\n      // back to parent node\r\n      context = context.backToParent();\r\n      context.apply.apply(context, [action].concat(args));\r\n      return proxy;\r\n    }\r\n  });\r\n  return proxy;\r\n}\r\n\r\nexport function $set(current) {\r\n  const args = arraySlice.call(arguments, 1);\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  // don't use destructing to improve performance\r\n  const prop = args[0];\r\n  const value = args[1];\r\n  const newValue = clone(current);\r\n  newValue[prop] = value;\r\n  return newValue;\r\n}\r\n\r\nfunction traversal(parent, node) {\r\n  for (let pair of Object.entries(node)) {\r\n    const key = pair[0];\r\n    let value = pair[1];\r\n    // convert obj method to custom modifier\r\n    if (value instanceof Function) {\r\n      value = [value];\r\n    }\r\n    const child = parent.childFromPath(key);\r\n    if (value instanceof Array) {\r\n      // is spec\r\n      if (value[0] instanceof Function || typeof value[0] === \"string\") {\r\n        // is modifier and its args\r\n        child.apply.apply(child, value);\r\n      } else {\r\n        // is sub spec\r\n        const spec = value[0];\r\n        if (spec instanceof Array) {\r\n          // apply for each child\r\n          for (let key of Object.keys(child.value)) {\r\n            const newChild = child.child(key);\r\n            newChild.apply.apply(newChild, spec);\r\n          }\r\n        } else {\r\n          for (let key of Object.keys(child.value)) {\r\n            traversal(child.child(key), spec);\r\n          }\r\n        }\r\n      }\r\n    } else if (isPlainObject(value)) {\r\n      traversal(child, value);\r\n    } else {\r\n      child.apply($set, value);\r\n    }\r\n  }\r\n}\r\n\r\n// a token to determine batch actions\r\nexport function $batch() {\r\n  // do nothing\r\n}\r\n\r\nexport const update = (state, changes) => {\r\n  const root = new Immutable(state);\r\n\r\n  if (changes instanceof Array) {\r\n    root.apply.apply(root, changes);\r\n  } else {\r\n    traversal(root, changes);\r\n  }\r\n\r\n  return root.value;\r\n};\r\n\r\nexport function updatePath(state, ...specs) {\r\n  const root = new Immutable(state);\r\n\r\n  for (let spec of specs) {\r\n    if (spec instanceof Function) {\r\n      spec = [spec];\r\n    }\r\n    const selector = spec[0];\r\n    const args = spec.slice(1);\r\n    const node = selector(createSelectorProxy(root)).__context__;\r\n    if (args.length) {\r\n      node.apply.apply(node, args);\r\n    }\r\n  }\r\n\r\n  return root.value;\r\n}\r\n\r\nexport default update;\r\n\r\nexport const actions = {\r\n  $batch,\r\n  batch: $batch,\r\n  \"=\": $set,\r\n  $assign,\r\n  assign: $assign,\r\n  $pop,\r\n  pop: $pop,\r\n  $push,\r\n  push: $push,\r\n  $remove,\r\n  remove: $remove,\r\n  $set,\r\n  set: $set,\r\n  $shift,\r\n  shift: $shift,\r\n  $sort,\r\n  sort: $sort,\r\n  $splice,\r\n  splice: $splice,\r\n  $toggle,\r\n  toggle: $toggle,\r\n  $unset,\r\n  unset: $unset,\r\n  $unshift,\r\n  unshift: $unshift,\r\n  $swap,\r\n  swap: $swap,\r\n  $removeAt,\r\n  removeAt: $removeAt\r\n};\r\n\r\nfunction cloneIfPossible(callback) {\r\n  return function() {\r\n    arguments[0] = clone(arguments[0]);\r\n    return callback.apply(null, arguments);\r\n  };\r\n}\r\n\r\nexport function define(name, action, disableAutoClone) {\r\n  // define(actionHash, disableAutoClone)\r\n  if (isPlainObject(name)) {\r\n    disableAutoClone = action;\r\n    for (let pair of Object.entries(name)) {\r\n      actions[pair.key] = disableAutoClone\r\n        ? pair.value\r\n        : cloneIfPossible(pair.value);\r\n    }\r\n  } else {\r\n    // define(name, action, disableAutoClone)\r\n    actions[name] = disableAutoClone ? action : cloneIfPossible(action);\r\n  }\r\n}\r\n"]}