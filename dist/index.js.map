{"version":3,"sources":["../index.js"],"names":["configure","$toggle","$unset","$splice","$push","$unshift","$pop","$shift","$sort","$remove","$swap","$merge","$set","update","define","configs","separator","newConfigs","Object","assign","Immutable","value","parent","path","children","childMap","modifier","args","newValue","change","changed","Array","slice","isPlainObject","forEach","x","child","push","split","reduce","current","props","length","clone","prop","arrayOp","array","method","index","count","newItems","concat","sorter","val","constructor","items","newArray","filter","indexOf","from","to","temp","obj","values","mergedObj","undefined","key","state","changes","root","traversal","node","entries","childFromPath","Function","actionName","actions","apply","Error","spec","item","merge","pop","remove","set","shift","sort","splice","toggle","unset","unshift","swap","name","action"],"mappings":"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","file":"index.js","sourcesContent":["const configs = {\r\n  separator: /\\./\r\n};\r\n\r\nexport function configure(newConfigs) {\r\n  Object.assign(configs, newConfigs);\r\n}\r\n\r\nclass Immutable {\r\n  constructor(value, parent, path) {\r\n    this.parent = parent;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.children = [];\r\n    this.childMap = {};\r\n  }\r\n\r\n  apply(modifier, ...args) {\r\n    const newValue = modifier(this.value, ...args);\r\n    if (newValue !== this.value) {\r\n      this.value = newValue;\r\n      this.change();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  change() {\r\n    if (!this.changed) {\r\n      this.changed = true;\r\n      if (this.value instanceof Array) {\r\n        this.value = this.value.slice();\r\n      } else if (isPlainObject(this.value)) {\r\n        this.value = Object.assign({}, this.value);\r\n      }\r\n    }\r\n\r\n    this.children.forEach(x => {\r\n      this.value[x.path] = x.value;\r\n    });\r\n\r\n    if (this.parent) {\r\n      this.parent.change();\r\n    }\r\n  }\r\n\r\n  child(path) {\r\n    if (path in this.childMap) {\r\n      return this.childMap[path];\r\n    }\r\n    const child = new Immutable(this.value[path], this, path);\r\n    this.children.push(child);\r\n    this.childMap[path] = child;\r\n    return child;\r\n  }\r\n\r\n  childFromPath(path) {\r\n    return path\r\n      .split(configs.separator)\r\n      .reduce((parent, path) => parent.child(path), this);\r\n  }\r\n}\r\n\r\nexport function $toggle(current, ...props) {\r\n  if (!props.length) {\r\n    return !current;\r\n  }\r\n  const newValue = clone(current);\r\n  props.forEach(prop => (newValue[prop] = !newValue[prop]));\r\n  return newValue;\r\n}\r\n\r\nexport function $unset(current, ...props) {\r\n  if (!current) return;\r\n  let newValue = current;\r\n  props.forEach(prop => {\r\n    if (prop in newValue) {\r\n      if (newValue === current) {\r\n        newValue = clone(current);\r\n      }\r\n      delete newValue[prop];\r\n    }\r\n  });\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction arrayOp(array, method, args) {\r\n  if (!array) {\r\n    array = [];\r\n  } else {\r\n    array = array.slice();\r\n  }\r\n  array[method](...args);\r\n  return array;\r\n}\r\n\r\nexport function $splice(array, index, count, ...newItems) {\r\n  if (newItems.length || count) {\r\n    return arrayOp(array, 'splice', [index, count].concat(newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $push(array, ...newItems) {\r\n  if (newItems.length) {\r\n    return arrayOp(array, 'push', newItems);\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $unshift(array, ...newItems) {\r\n  if (newItems.length) {\r\n    return arrayOp(array, 'unshift', newItems);\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $pop(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, 'pop');\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $shift(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, 'pop');\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $sort(array, sorter) {\r\n  return arrayOp(array, 'sort', sorter);\r\n}\r\n\r\nfunction clone(value) {\r\n  if (value instanceof Array) return value.slice();\r\n  return Object.assign({}, value);\r\n}\r\n\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === 'object' && val.constructor === Object;\r\n\r\nexport function $remove(array, ...items) {\r\n  const newArray = array.filter(x => items.indexOf(x) === -1);\r\n  return newArray.length === array.length ? array : newArray;\r\n}\r\n\r\nexport function $swap(current, from, to) {\r\n  const newValue = clone(current);\r\n  const temp = newValue[from];\r\n  newValue[from] = newValue[to];\r\n  newValue[to] = temp;\r\n  return newValue;\r\n}\r\n\r\nexport function $merge(obj, ...values) {\r\n  if (values.length) {\r\n    let mergedObj = obj;\r\n    values.forEach(value => {\r\n      if (value === null || value === undefined) return;\r\n      for (let key in value) {\r\n        if (value[key] !== mergedObj[key]) {\r\n          if (mergedObj === obj) {\r\n            mergedObj = Object.assign({}, obj);\r\n          }\r\n          mergedObj[key] = value[key];\r\n        }\r\n      }\r\n    });\r\n    return mergedObj;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nexport function $set(current, ...args) {\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  const [prop, value] = args;\r\n  const newValue = clone(current);\r\n  newValue[prop] = value;\r\n  return newValue;\r\n}\r\n\r\nexport function update(state, changes) {\r\n  const root = new Immutable(state);\r\n\r\n  function traversal(parent, node) {\r\n    Object.entries(node).forEach(([key, value]) => {\r\n      const child = parent.childFromPath(key);\r\n      if (value instanceof Array) {\r\n        // is spec\r\n        if (value[0] instanceof Function || typeof value[0] === 'string') {\r\n          if (typeof value[0] === 'string') {\r\n            // is action name\r\n            const actionName = value[0];\r\n            if (actionName in actions) {\r\n              child.apply(...[actions[actionName]].concat(value.slice(1)));\r\n            } else {\r\n              throw new Error(`No action '${actionName}'' defined`);\r\n            }\r\n          } else {\r\n            // is modifier and its args\r\n            child.apply(...value);\r\n          }\r\n        } else {\r\n          // is sub spec\r\n          if (child.value instanceof Array) {\r\n            const spec = value[0];\r\n            if (spec instanceof Array) {\r\n              // apply for each child\r\n              child.value.forEach((item, index) => {\r\n                child.child(index).apply(...spec);\r\n              });\r\n            } else {\r\n              child.value.forEach((item, index) => {\r\n                traversal(child.child(index), spec);\r\n              });\r\n            }\r\n          } else {\r\n            throw new Error(\r\n              'Invalid spec. Cannot apply spec for ' + child.value\r\n            );\r\n          }\r\n        }\r\n      } else if (isPlainObject(value)) {\r\n        traversal(child, value);\r\n      } else {\r\n        child.apply($set, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (changes instanceof Array) {\r\n    root.apply(...changes);\r\n  } else {\r\n    traversal(root, changes);\r\n  }\r\n\r\n  return root.value;\r\n}\r\n\r\nexport const actions = {\r\n  $merge,\r\n  merge: $merge,\r\n  $pop,\r\n  pop: $pop,\r\n  $push,\r\n  push: $push,\r\n  $remove,\r\n  remove: $remove,\r\n  $set,\r\n  set: $set,\r\n  $shift,\r\n  shift: $shift,\r\n  $sort,\r\n  sort: $sort,\r\n  $splice,\r\n  splice: $splice,\r\n  $toggle,\r\n  toggle: $toggle,\r\n  $unset,\r\n  unset: $unset,\r\n  $unshift,\r\n  unshift: $unshift,\r\n  $swap,\r\n  swap: $swap\r\n};\r\n\r\nexport function define(name, action) {\r\n  if (isPlainObject(name)) {\r\n    Object.assign(actions, action);\r\n  } else {\r\n    actions[name] = action;\r\n  }\r\n}\r\n"]}