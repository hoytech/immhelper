{"version":3,"sources":["../index.js"],"names":["$toggle","$unset","$splice","$push","$unshift","$pop","$shift","$sort","$remove","$merge","$set","update","Immutable","value","parent","path","children","childMap","modifier","args","newValue","change","changed","Array","slice","isPlainObject","Object","assign","forEach","x","child","push","split","reduce","current","props","length","array","prop","obj","isArray","arrayOp","method","index","count","newItems","concat","sorter","val","constructor","items","newArray","filter","indexOf","values","mergedObj","undefined","key","state","changes","root","traversal","node","entries","childFromPath","Function","apply","spec","item","Error"],"mappings":"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","file":"index.js","sourcesContent":["class Immutable {\r\n  constructor(value, parent, path) {\r\n    this.parent = parent;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.children = [];\r\n    this.childMap = {};\r\n  }\r\n\r\n  apply(modifier, ...args) {\r\n    const newValue = modifier(this.value, ...args);\r\n    if (newValue !== this.value) {\r\n      this.value = newValue;\r\n      this.change();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  change() {\r\n    if (!this.changed) {\r\n      this.changed = true;\r\n      if (this.value instanceof Array) {\r\n        this.value = this.value.slice();\r\n      } else if (isPlainObject(this.value)) {\r\n        this.value = Object.assign({}, this.value);\r\n      }\r\n    }\r\n\r\n    this.children.forEach(x => {\r\n      this.value[x.path] = x.value;\r\n    });\r\n\r\n    if (this.parent) {\r\n      this.parent.change();\r\n    }\r\n  }\r\n\r\n  child(path) {\r\n    if (path in this.childMap) {\r\n      return this.childMap[path];\r\n    }\r\n    const child = new Immutable(this.value[path], this, path);\r\n    this.children.push(child);\r\n    this.childMap[path] = child;\r\n    return child;\r\n  }\r\n\r\n  childFromPath(path) {\r\n    return path.split(/\\./).reduce((parent, path) => parent.child(path), this);\r\n  }\r\n}\r\n\r\nexport function $toggle(current, ...props) {\r\n  if (!props.length) {\r\n    return !current;\r\n  }\r\n\r\n  if (current instanceof Array) {\r\n    const array = current.slice();\r\n    props.forEach(prop => (array[prop] = !array[prop]));\r\n    return array;\r\n  }\r\n  const obj = Object.assign({}, current);\r\n  props.forEach(prop => (obj[prop] = !obj[prop]));\r\n  return obj;\r\n}\r\n\r\nexport function $unset(current, ...props) {\r\n  if (!current) return;\r\n  let newValue = current;\r\n  const isArray = current instanceof Array;\r\n  props.forEach(prop => {\r\n    if (prop in newValue) {\r\n      if (newValue === current) {\r\n        if (isArray) {\r\n          newValue = current.slice();\r\n        } else {\r\n          newValue = Object.assign({}, current);\r\n        }\r\n      }\r\n      delete newValue[prop];\r\n    }\r\n  });\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction arrayOp(array, method, args) {\r\n  if (!array) {\r\n    array = [];\r\n  } else {\r\n    array = array.slice();\r\n  }\r\n  array[method](...args);\r\n  return array;\r\n}\r\n\r\nexport function $splice(array, index, count, ...newItems) {\r\n  if (newItems.length || count) {\r\n    return arrayOp(array, 'splice', [index, count].concat(newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $push(array, ...newItems) {\r\n  if (newItems.length) {\r\n    return arrayOp(array, 'push', newItems);\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $unshift(array, ...newItems) {\r\n  if (newItems.length) {\r\n    return arrayOp(array, 'unshift', newItems);\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $pop(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, 'pop');\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $shift(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, 'pop');\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $sort(array, sorter) {\r\n  return arrayOp(array, 'sort', sorter);\r\n}\r\n\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === 'object' && val.constructor === Object;\r\n\r\nexport function $remove(array, ...items) {\r\n  const newArray = array.filter(x => items.indexOf(x) === -1);\r\n  return newArray.length === array.length ? array : newArray;\r\n}\r\n\r\nexport function $merge(obj, ...values) {\r\n  if (values.length) {\r\n    let mergedObj = obj;\r\n    values.forEach(value => {\r\n      if (value === null || value === undefined) return;\r\n      for (let key in value) {\r\n        if (value[key] !== mergedObj[key]) {\r\n          if (mergedObj === obj) {\r\n            mergedObj = Object.assign({}, obj);\r\n          }\r\n          mergedObj[key] = value[key];\r\n        }\r\n      }\r\n    });\r\n    return mergedObj;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nexport function $set(current, ...args) {\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  const [prop, value] = args;\r\n  if (current instanceof Array) {\r\n    const array = current.slice();\r\n    array[prop] = value;\r\n    return array;\r\n  }\r\n  const obj = {\r\n    ...current\r\n  };\r\n  obj[prop] = value;\r\n  return obj;\r\n}\r\n\r\nexport function update(state, changes) {\r\n  const root = new Immutable(state);\r\n\r\n  function traversal(parent, node) {\r\n    Object.entries(node).forEach(([key, value]) => {\r\n      const child = parent.childFromPath(key);\r\n      if (value instanceof Array) {\r\n        if (value[0] instanceof Function) {\r\n          child.apply(...value);\r\n        } else {\r\n          if (child.value instanceof Array) {\r\n            const spec = value[0];\r\n            if (spec instanceof Array) {\r\n              // apply for each child\r\n              child.value.forEach((item, index) => {\r\n                child.child(index).apply(...spec);\r\n              });\r\n            } else {\r\n              child.value.forEach((item, index) => {\r\n                traversal(child.child(index), spec);\r\n              });\r\n            }\r\n          } else {\r\n            throw new Error(\r\n              'Invalid spec. Cannot apply spec for ' + child.value\r\n            );\r\n          }\r\n        }\r\n      } else if (isPlainObject(value)) {\r\n        traversal(child, value);\r\n      } else {\r\n        child.apply($set, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (changes instanceof Array) {\r\n    root.apply(...changes);\r\n  } else {\r\n    traversal(root, changes);\r\n  }\r\n\r\n  return root.value;\r\n}\r\n"]}