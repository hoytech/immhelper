{"version":3,"sources":["../index.js"],"names":["configure","$toggle","$unset","$splice","$push","$unshift","$pop","$shift","$sort","$remove","$swap","$merge","$set","update","define","configs","separator","newConfigs","Object","assign","Immutable","value","parent","path","children","childMap","modifier","args","slice","call","arguments","actions","Error","newValue","apply","concat","change","changed","Array","isPlainObject","forEach","x","child","push","split","reduce","current","props","length","clone","prop","arrayOp","array","method","index","count","newItems","sorter","val","constructor","items","newArray","filter","indexOf","from","to","temp","obj","values","mergedObj","undefined","key","state","changes","root","traversal","node","entries","childFromPath","Function","spec","keys","newChild","merge","pop","remove","set","shift","sort","splice","toggle","unset","unshift","swap","name","action"],"mappings":"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","file":"index.js","sourcesContent":["const configs = {\r\n  separator: \".\"\r\n};\r\n\r\nexport function configure(newConfigs) {\r\n  Object.assign(configs, newConfigs);\r\n}\r\n\r\nclass Immutable {\r\n  constructor(value, parent, path) {\r\n    this.parent = parent;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.children = [];\r\n    this.childMap = {};\r\n  }\r\n\r\n  apply(modifier) {\r\n    const args = [].slice.call(arguments, 1);\r\n    if (typeof modifier === \"string\") {\r\n      if (modifier in actions) {\r\n        modifier = actions[modifier];\r\n      } else {\r\n        throw new Error(`No action '${modifier}'' defined`);\r\n      }\r\n    }\r\n    const newValue = modifier.apply(null, [this.value].concat(args));\r\n    if (newValue !== this.value) {\r\n      this.value = newValue;\r\n      this.change();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  change() {\r\n    if (!this.changed) {\r\n      this.changed = true;\r\n      if (this.value instanceof Array) {\r\n        this.value = this.value.slice();\r\n      } else if (isPlainObject(this.value)) {\r\n        this.value = Object.assign({}, this.value);\r\n      }\r\n    }\r\n\r\n    this.children.forEach(x => {\r\n      this.value[x.path] = x.value;\r\n    });\r\n\r\n    if (this.parent) {\r\n      this.parent.change();\r\n    }\r\n  }\r\n\r\n  child(path) {\r\n    if (path in this.childMap) {\r\n      return this.childMap[path];\r\n    }\r\n    const child = new Immutable(this.value[path], this, path);\r\n    this.children.push(child);\r\n    this.childMap[path] = child;\r\n    return child;\r\n  }\r\n\r\n  childFromPath(path) {\r\n    return path\r\n      .split(configs.separator)\r\n      .reduce((parent, path) => parent.child(path), this);\r\n  }\r\n}\r\n\r\nexport function $toggle(current) {\r\n  const props = [].slice.call(arguments, 1);\r\n  if (!props.length) {\r\n    return !current;\r\n  }\r\n  const newValue = clone(current);\r\n  props.forEach(prop => (newValue[prop] = !newValue[prop]));\r\n  return newValue;\r\n}\r\n\r\nexport function $unset(current) {\r\n  const props = [].slice.call(arguments, 1);\r\n  if (!current) return;\r\n  let newValue = current;\r\n  props.forEach(prop => {\r\n    if (prop in newValue) {\r\n      if (newValue === current) {\r\n        newValue = clone(current);\r\n      }\r\n      delete newValue[prop];\r\n    }\r\n  });\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction arrayOp(array, method, args) {\r\n  if (!array) {\r\n    array = [];\r\n  } else {\r\n    array = array.slice();\r\n  }\r\n  array[method](...args);\r\n  return array;\r\n}\r\n\r\nexport function $splice(array, index, count) {\r\n  const newItems = [].slice.call(arguments, 3);\r\n  if (newItems.length || count) {\r\n    return arrayOp(array, \"splice\", [index, count].concat(newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $push(array) {\r\n  const newItems = [].slice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, \"push\", newItems);\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $unshift(array) {\r\n  const newItems = [].slice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, \"unshift\", newItems);\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $pop(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, \"pop\");\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $shift(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, \"pop\");\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $sort(array, sorter) {\r\n  return arrayOp(array, \"sort\", sorter);\r\n}\r\n\r\nfunction clone(value) {\r\n  if (value instanceof Array) return value.slice();\r\n  return Object.assign({}, value);\r\n}\r\n\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === \"object\" && val.constructor === Object;\r\n\r\nexport function $remove(array) {\r\n  const items = [].slice.call(arguments, 1);\r\n  const newArray = array.filter(x => items.indexOf(x) === -1);\r\n  return newArray.length === array.length ? array : newArray;\r\n}\r\n\r\nexport function $swap(current, from, to) {\r\n  const newValue = clone(current);\r\n  const temp = newValue[from];\r\n  newValue[from] = newValue[to];\r\n  newValue[to] = temp;\r\n  return newValue;\r\n}\r\n\r\nexport function $merge(obj) {\r\n  const values = [].slice.call(arguments, 1);\r\n  if (values.length) {\r\n    let mergedObj = obj;\r\n    values.forEach(value => {\r\n      if (value === null || value === undefined) return;\r\n      for (let key in value) {\r\n        if (value[key] !== mergedObj[key]) {\r\n          if (mergedObj === obj) {\r\n            mergedObj = Object.assign({}, obj);\r\n          }\r\n          mergedObj[key] = value[key];\r\n        }\r\n      }\r\n    });\r\n    return mergedObj;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nexport function $set(current) {\r\n  const args = [].slice.call(arguments, 1);\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  const [prop, value] = args;\r\n  const newValue = clone(current);\r\n  newValue[prop] = value;\r\n  return newValue;\r\n}\r\n\r\nexport function update(state, changes) {\r\n  const root = new Immutable(state);\r\n\r\n  function traversal(parent, node) {\r\n    Object.entries(node).forEach(([key, value]) => {\r\n      const child = parent.childFromPath(key);\r\n      if (value instanceof Array) {\r\n        // is spec\r\n        if (value[0] instanceof Function || typeof value[0] === \"string\") {\r\n          // is modifier and its args\r\n          child.apply.apply(child, value);\r\n        } else {\r\n          // is sub spec\r\n          const spec = value[0];\r\n          if (spec instanceof Array) {\r\n            // apply for each child\r\n            Object.keys(child.value).forEach(key => {\r\n              const newChild = child.child(key);\r\n              newChild.apply.apply(newChild, spec);\r\n            });\r\n          } else {\r\n            Object.keys(child.value).forEach(key => {\r\n              traversal(child.child(key), spec);\r\n            });\r\n          }\r\n        }\r\n      } else if (isPlainObject(value)) {\r\n        traversal(child, value);\r\n      } else {\r\n        child.apply($set, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  if (changes instanceof Array) {\r\n    root.apply.apply(root, changes);\r\n  } else {\r\n    traversal(root, changes);\r\n  }\r\n\r\n  return root.value;\r\n}\r\n\r\nexport default update;\r\n\r\nexport const actions = {\r\n  $merge,\r\n  merge: $merge,\r\n  $pop,\r\n  pop: $pop,\r\n  $push,\r\n  push: $push,\r\n  $remove,\r\n  remove: $remove,\r\n  $set,\r\n  set: $set,\r\n  $shift,\r\n  shift: $shift,\r\n  $sort,\r\n  sort: $sort,\r\n  $splice,\r\n  splice: $splice,\r\n  $toggle,\r\n  toggle: $toggle,\r\n  $unset,\r\n  unset: $unset,\r\n  $unshift,\r\n  unshift: $unshift,\r\n  $swap,\r\n  swap: $swap\r\n};\r\n\r\nexport function define(name, action) {\r\n  if (isPlainObject(name)) {\r\n    Object.assign(actions, action);\r\n  } else {\r\n    actions[name] = action;\r\n  }\r\n}\r\n"]}