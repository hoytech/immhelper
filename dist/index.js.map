{"version":3,"sources":["../index.js"],"names":["configure","$toggle","$unset","$splice","$removeAt","$push","$unshift","$pop","$shift","$sort","$remove","$swap","$assign","spec","$if","$switch","$unless","$set","$batch","updatePath","define","configs","separator","Array","prototype","arraySlice","slice","arrayShift","shift","arrayUnshift","unshift","arrayPush","push","arrayPop","pop","arraySplice","splice","arraySort","sort","contextProp","newConfigs","Object","assign","Immutable","value","parent","path","children","childMap","modifier","args","call","arguments","actions","Error","job","Function","apply","newValue","concat","change","valueUpdated","length","changed","clone","x","newChildren","filter","child","split","reduce","pattern","specsOrCallback","callback","specs","exp","flags","RegExp","key","test","undefined","originalCallback","result","traversal","root","isPlainObject","entries","pair","childPath","node","childFromPath","processSpec","current","props","prop","forEach","arrayOp","array","index","count","newItems","indexes","newArray","sorter","val","constructor","items","indexOf","from","to","temp","obj","values","mergedObj","createSelectorProxy","context","proxy","Proxy","get","target","set","thisArg","action","backToParent","condition","thenSpec","elseSpec","makeChoice","default","processSubSpec","keys","newChild","charAt","descendants","substr","update","state","changes","selector","batch","remove","toggle","unset","swap","removeAt","if","unless","switch","cloneIfPossible","name","disableAutoClone"],"mappings":"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","file":"index.js","sourcesContent":["const configs = {\r\n  // for fast performance, we process dot as separator only\r\n  separator: \".\"\r\n};\r\n\r\nconst {\r\n  slice: arraySlice,\r\n  shift: arrayShift,\r\n  unshift: arrayUnshift,\r\n  push: arrayPush,\r\n  pop: arrayPop,\r\n  splice: arraySplice,\r\n  sort: arraySort\r\n} = Array.prototype;\r\nconst contextProp = \"@@context\";\r\nexport function configure(newConfigs) {\r\n  Object.assign(configs, newConfigs);\r\n}\r\n\r\nclass Immutable {\r\n  constructor(value, parent, path) {\r\n    this.parent = parent;\r\n    this.value = value;\r\n    this.path = path;\r\n    this.children = [];\r\n    this.childMap = {};\r\n  }\r\n\r\n  apply(modifier) {\r\n    const args = arraySlice.call(arguments, 1);\r\n    if (typeof modifier === \"string\") {\r\n      if (modifier in actions) {\r\n        modifier = actions[modifier];\r\n      } else {\r\n        throw new Error(`No action '${modifier}'' defined`);\r\n      }\r\n    }\r\n\r\n    // is batch processing\r\n    if (modifier === $batch) {\r\n      for (let job of args) {\r\n        if (job instanceof Function) {\r\n          job = [job];\r\n        }\r\n        this.apply.apply(this, job);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    let newValue = modifier.apply(null, [this.value].concat(args));\r\n\r\n    // need special context\r\n    while (newValue instanceof Function) {\r\n      newValue = newValue(this);\r\n    }\r\n    // nothing to change\r\n    if (newValue === this) {\r\n      return this;\r\n    }\r\n\r\n    if (newValue !== this.value) {\r\n      this.value = newValue;\r\n      this.change(true);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  change(valueUpdated) {\r\n    // notify to parent that child value is changed\r\n    if (this.parent) {\r\n      this.parent.change();\r\n    }\r\n\r\n    if (this.children.length) {\r\n      // if this is parent, we must clone its value\r\n      if (!this.changed) {\r\n        this.changed = true;\r\n        this.value = clone(this.value);\r\n        for (let x of this.children) {\r\n          if (x.parent === this) {\r\n            this.value[x.path] = x.value;\r\n          }\r\n        }\r\n      } else if (valueUpdated) {\r\n        const newChildren = [];\r\n        for (let x of this.children) {\r\n          if (x.parent === this && x.path in this.value) {\r\n            x.value = this.value[x.path];\r\n            newChildren.push(x);\r\n          } else {\r\n            // child is removed, so we detach the child\r\n            delete x.parent;\r\n            delete this.childMap[x.path];\r\n          }\r\n        }\r\n        this.children = newChildren;\r\n      }\r\n    }\r\n\r\n    // update parent model\r\n    if (this.parent) {\r\n      this.parent.value[this.path] = this.value;\r\n    }\r\n  }\r\n\r\n  backToParent() {\r\n    // make sure child should be removed fron its parent\r\n    this.parent.children = this.parent.children.filter(x => x !== this);\r\n    delete this.parent.childMap[this.path];\r\n    return this.parent;\r\n  }\r\n\r\n  child(path) {\r\n    if (path in this.childMap) {\r\n      return this.childMap[path];\r\n    }\r\n    const child = new Immutable(this.value[path], this, path);\r\n    this.children.push(child);\r\n    this.childMap[path] = child;\r\n    return child;\r\n  }\r\n\r\n  childFromPath(path) {\r\n    return (path instanceof Array\r\n      ? path\r\n      : path.split(configs.separator)\r\n    ).reduce((parent, path) => parent.child(path), this);\r\n  }\r\n\r\n  descendants(pattern, specsOrCallback) {\r\n    let callback;\r\n    if (pattern) {\r\n      // match node by pattern and data must be specs\r\n      const specs = specsOrCallback;\r\n      // convert pattern to regex\r\n      const [, exp, flags] = pattern.split(\"/\");\r\n      pattern = new RegExp(exp, flags);\r\n      callback = function(value) {\r\n        if (typeof value === \"object\") {\r\n          for (let key in value) {\r\n            if (pattern.test(key)) {\r\n              return specs;\r\n            }\r\n          }\r\n        }\r\n        return undefined;\r\n      };\r\n    } else {\r\n      if (specsOrCallback instanceof Array) {\r\n        // [match, ...specs]\r\n        // callback can return false to skip checking node or return spec index\r\n        const originalCallback = specsOrCallback[0];\r\n        const specs = specsOrCallback.slice(1);\r\n        callback = function() {\r\n          const result = originalCallback.apply(null, arguments);\r\n          if (typeof result === \"number\") {\r\n            return specs[result];\r\n          }\r\n          return result ? specs[0] : undefined;\r\n        };\r\n      } else {\r\n        // data must be callback func, it will be called when visit node\r\n        callback = specsOrCallback;\r\n      }\r\n    }\r\n\r\n    function traversal(root, parent, path) {\r\n      if (parent instanceof Array || isPlainObject(parent)) {\r\n        for (let pair of Object.entries(parent)) {\r\n          const value = pair[1];\r\n          const key = pair[0];\r\n          const childPath = path.concat(key);\r\n          const specs = callback(value, key);\r\n          if (specs) {\r\n            // create node from path\r\n            const node = root.childFromPath(childPath);\r\n            processSpec(node, specs);\r\n          }\r\n          traversal(root, value, childPath);\r\n        }\r\n      }\r\n    }\r\n\r\n    traversal(this, this.value, []);\r\n  }\r\n}\r\n\r\nexport function $toggle(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  if (!props.length) {\r\n    return !current;\r\n  }\r\n  const newValue = clone(current);\r\n  for (let prop of props) {\r\n    newValue[prop] = !newValue[prop];\r\n  }\r\n  return newValue;\r\n}\r\n\r\nexport function $unset(current) {\r\n  const props = arraySlice.call(arguments, 1);\r\n  // no prop to unset => unset its self\r\n  if (!props.length) {\r\n    return function(node) {\r\n      const parent = node.parent;\r\n      if (!parent) {\r\n        return current;\r\n      }\r\n\r\n      if (node.path in parent.value) {\r\n        if (!parent.changed) {\r\n          parent.value = clone(parent.value);\r\n        }\r\n        if (parent.value instanceof Array) {\r\n          parent.value.splice(node.path, 1);\r\n        } else {\r\n          delete parent.value[node.path];\r\n        }\r\n        delete node.parent;\r\n        parent.change(true);\r\n      } else {\r\n        // not exist in parent value\r\n      }\r\n    };\r\n  }\r\n\r\n  if (!current) return;\r\n  let newValue = current;\r\n  props.forEach(prop => {\r\n    if (prop in newValue) {\r\n      if (newValue === current) {\r\n        newValue = clone(current);\r\n      }\r\n      delete newValue[prop];\r\n    }\r\n  });\r\n\r\n  return newValue;\r\n}\r\n\r\nfunction arrayOp(array, modifier) {\r\n  if (!array) {\r\n    array = [];\r\n  } else {\r\n    array = array.slice();\r\n  }\r\n  modifier(array);\r\n  return array;\r\n}\r\n\r\nexport function $splice(array, index, count) {\r\n  const newItems = arraySlice.call(arguments, 3);\r\n  if (newItems.length || count) {\r\n    return arrayOp(array, x =>\r\n      arraySplice.apply(x, [index, count].concat(newItems))\r\n    );\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $removeAt(array) {\r\n  const indexes = arraySlice.call(arguments, 1);\r\n  let newArray = array;\r\n  // remove from bottom to top\r\n  indexes.sort();\r\n  while (indexes.length) {\r\n    const index = indexes.pop();\r\n    if (index >= 0 && index < newArray.length) {\r\n      if (newArray === array) {\r\n        newArray = newArray.slice();\r\n      }\r\n      newArray.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  return newArray;\r\n}\r\n\r\nexport function $push(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayPush.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $unshift(array) {\r\n  const newItems = arraySlice.call(arguments, 1);\r\n  if (newItems.length) {\r\n    return arrayOp(array, x => arrayUnshift.apply(x, newItems));\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $pop(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.pop());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $shift(array) {\r\n  if (!array || array.length) {\r\n    return arrayOp(array, x => x.shift());\r\n  }\r\n  return array;\r\n}\r\n\r\nexport function $sort(array, sorter) {\r\n  return arrayOp(array, x => x.sort(sorter));\r\n}\r\n\r\nfunction clone(value) {\r\n  if (value instanceof Array) {\r\n    return value.slice();\r\n  }\r\n  if (value === null || value === undefined || isPlainObject(value)) {\r\n    return Object.assign({}, value);\r\n  }\r\n  return value;\r\n}\r\n\r\nconst isPlainObject = val =>\r\n  !!val && typeof val === \"object\" && val.constructor === Object;\r\n\r\nexport function $remove(array) {\r\n  const items = arraySlice.call(arguments, 1);\r\n  const newArray = array.filter(x => items.indexOf(x) === -1);\r\n  return newArray.length === array.length ? array : newArray;\r\n}\r\n\r\nexport function $swap(current, from, to) {\r\n  const newValue = clone(current);\r\n  const temp = newValue[from];\r\n  newValue[from] = newValue[to];\r\n  newValue[to] = temp;\r\n  return newValue;\r\n}\r\n\r\nexport function $assign(obj) {\r\n  const values = arraySlice.call(arguments, 1);\r\n  if (values.length) {\r\n    let mergedObj = obj;\r\n    values.forEach(value => {\r\n      if (value === null || value === undefined) return;\r\n      for (let key in value) {\r\n        if (value[key] !== mergedObj[key]) {\r\n          if (mergedObj === obj) {\r\n            mergedObj = Object.assign({}, obj);\r\n          }\r\n          mergedObj[key] = value[key];\r\n        }\r\n      }\r\n    });\r\n    return mergedObj;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\nfunction createSelectorProxy(context) {\r\n  const proxy = new Proxy(x => undefined, {\r\n    get(target, prop) {\r\n      if (prop === contextProp) return context;\r\n      context = context.child(prop);\r\n      return proxy;\r\n    },\r\n    set(target, prop, value) {\r\n      context.apply($set, prop, value);\r\n      return proxy;\r\n    },\r\n    apply(target, thisArg, args) {\r\n      const action = context.path;\r\n      // back to parent node\r\n      context = context.backToParent();\r\n      context.apply.apply(context, [action].concat(args));\r\n      return proxy;\r\n    }\r\n  });\r\n  return proxy;\r\n}\r\n\r\nexport function spec(value) {\r\n  return function(node) {\r\n    if (value) {\r\n      processSpec(node, value);\r\n    }\r\n    return node;\r\n  };\r\n}\r\n\r\nexport function $if(current, condition, thenSpec, elseSpec) {\r\n  return spec(condition(current) ? thenSpec : elseSpec);\r\n}\r\n\r\nexport function $switch(current, makeChoice, specs = {}) {\r\n  if (!(makeChoice instanceof Function)) {\r\n    specs = makeChoice;\r\n    makeChoice = null;\r\n  }\r\n  return spec(\r\n    specs[makeChoice instanceof Function ? makeChoice(current) : current] ||\r\n      specs.default\r\n  );\r\n}\r\n\r\nexport function $unless(current, condition, value) {\r\n  return spec(condition(current) ? undefined : value);\r\n}\r\n\r\nexport function $set(current) {\r\n  const args = arraySlice.call(arguments, 1);\r\n  if (args.length < 2) {\r\n    return args[0];\r\n  }\r\n  // don't use destructing to improve performance\r\n  const prop = args[0];\r\n  const value = args[1];\r\n  if (current[prop] === value) return current;\r\n  const newValue = clone(current);\r\n  newValue[prop] = value;\r\n  return newValue;\r\n}\r\n\r\nfunction processSpec(child, value) {\r\n  // is main spec\r\n  if (value[0] instanceof Function || typeof value[0] === \"string\") {\r\n    // is modifier and its args\r\n    child.apply.apply(child, value);\r\n  } else {\r\n    processSubSpec(child, value);\r\n  }\r\n}\r\n\r\nfunction processSubSpec(child, value) {\r\n  // is sub spec\r\n  const spec = value[0];\r\n  const filter = value[1];\r\n  if (spec instanceof Array) {\r\n    // apply for each child\r\n    for (let key of Object.keys(child.value)) {\r\n      // only apply spec for child which is satisfied filter\r\n      if (filter && !filter(child.value[key], key)) {\r\n        continue;\r\n      }\r\n      const newChild = child.child(key);\r\n      newChild.apply.apply(newChild, spec);\r\n    }\r\n  } else {\r\n    for (let key of Object.keys(child.value)) {\r\n      traversal(child.child(key), spec);\r\n    }\r\n  }\r\n}\r\n\r\nfunction traversal(parent, node) {\r\n  for (let pair of Object.entries(node)) {\r\n    const key = pair[0];\r\n    let value = pair[1];\r\n    if (key.charAt(0) === \"?\") {\r\n      // is wildcard\r\n      parent.descendants(key.substr(1), value);\r\n      continue;\r\n    }\r\n    // convert obj method to custom modifier\r\n    if (value instanceof Function) {\r\n      value = [value];\r\n    }\r\n    const child = parent.childFromPath(key);\r\n    if (value instanceof Array) {\r\n      processSpec(child, value);\r\n    } else if (isPlainObject(value)) {\r\n      traversal(child, value);\r\n    } else {\r\n      child.apply($set, value);\r\n    }\r\n  }\r\n}\r\n\r\n// a token to determine batch actions\r\nexport function $batch() {\r\n  // do nothing\r\n}\r\n\r\nexport const update = (state, changes) => {\r\n  const root = new Immutable(state);\r\n\r\n  if (changes instanceof Array) {\r\n    processSpec(root, changes);\r\n  } else {\r\n    traversal(root, changes);\r\n  }\r\n\r\n  return root.value;\r\n};\r\n\r\nexport function updatePath(state, ...specs) {\r\n  const root = new Immutable(state);\r\n\r\n  for (let spec of specs) {\r\n    if (spec instanceof Function) {\r\n      spec = [spec];\r\n    }\r\n    const selector = spec[0];\r\n    const args = spec.slice(1);\r\n    const node = selector(createSelectorProxy(root))[contextProp];\r\n    if (args.length) {\r\n      node.apply.apply(node, args);\r\n    }\r\n  }\r\n\r\n  return root.value;\r\n}\r\n\r\nexport default update;\r\n\r\nexport const actions = {\r\n  $batch,\r\n  batch: $batch,\r\n  \"=\": $set,\r\n  $assign,\r\n  assign: $assign,\r\n  $pop,\r\n  pop: $pop,\r\n  $push,\r\n  push: $push,\r\n  $remove,\r\n  remove: $remove,\r\n  $set,\r\n  set: $set,\r\n  $shift,\r\n  shift: $shift,\r\n  $sort,\r\n  sort: $sort,\r\n  $splice,\r\n  splice: $splice,\r\n  $toggle,\r\n  toggle: $toggle,\r\n  $unset,\r\n  unset: $unset,\r\n  $unshift,\r\n  unshift: $unshift,\r\n  $swap,\r\n  swap: $swap,\r\n  $removeAt,\r\n  removeAt: $removeAt,\r\n  if: $if,\r\n  $if,\r\n  $unless,\r\n  unless: $unless,\r\n  $switch,\r\n  switch: $switch\r\n};\r\n\r\nfunction cloneIfPossible(callback) {\r\n  return function() {\r\n    arguments[0] = clone(arguments[0]);\r\n    return callback.apply(null, arguments);\r\n  };\r\n}\r\n\r\nexport function define(name, action, disableAutoClone) {\r\n  // define(actionHash, disableAutoClone)\r\n  if (isPlainObject(name)) {\r\n    disableAutoClone = action;\r\n    for (let pair of Object.entries(name)) {\r\n      actions[pair.key] = disableAutoClone\r\n        ? pair.value\r\n        : cloneIfPossible(pair.value);\r\n    }\r\n  } else {\r\n    // define(name, action, disableAutoClone)\r\n    actions[name] = disableAutoClone ? action : cloneIfPossible(action);\r\n  }\r\n}\r\n"]}