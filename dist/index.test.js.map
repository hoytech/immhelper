{"version":3,"sources":["../index.test.js"],"names":["describe","it","original","a","b","c","d","e","f","arrayPush","objMerge","name","toggleMe","toggleMyProp","done","completed","removeSecond","removeAppleAndBanana","unsetMyProp","data1","Date","data2","sqrt","doubleItems","swapItems","increaseProps","one","two","three","removeByIndexes","batchProcessing","pipeProcessing","doubleOddNumbers","parentNode","childNode","parentNodes","id","updateTree","text","children","data","usingIfToUpdate","value","usingUnlessToUpdate","dataLoaded","usingSwitchToUpdate1","usingSwitchToUpdate2","usingFilter","specs","$set","$push","$assign","age","school","x","Math","$toggle","$unset","$splice","$remove","toUpperCase","node","prop","undefined","default","male","result","expect","not","toBe","toEqual","newProp","deleted","isEven","isOdd","sex","push","push7","unshift7","$unshift","spliceData","mergeData","obj","toggleData","removed","g","h","i","j","l","m","n","modified"],"mappings":"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","file":"index.test.js","sourcesContent":["import {\r\n  update,\r\n  updatePath,\r\n  $push,\r\n  $unshift,\r\n  $splice,\r\n  $assign,\r\n  $toggle,\r\n  $unset,\r\n  $set,\r\n  $remove\r\n} from \"./index\";\r\n\r\ndescribe(\"samples\", function() {\r\n  it(\"all api\", function() {\r\n    const original = {\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [],\r\n      objMerge: {\r\n        name: \"Peter\"\r\n      },\r\n      toggleMe: false,\r\n      toggleMyProp: {\r\n        done: false,\r\n        completed: true\r\n      },\r\n      removeSecond: [1, 2, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\", \"Apple\", \"Banana\"],\r\n      unsetMyProp: {\r\n        data1: new Date(),\r\n        data2: true\r\n      },\r\n      sqrt: 100,\r\n      doubleItems: [1, 2, 3, 4, 5, 6, 7, 8],\r\n      swapItems: [\"left\", \"right\"],\r\n      increaseProps: {\r\n        one: 1,\r\n        two: 2,\r\n        three: 3\r\n      },\r\n      removeByIndexes: [1, 2, 3, 4],\r\n      batchProcessing: {},\r\n      pipeProcessing: \"hello\",\r\n      doubleOddNumbers: [1, 2, 3, 4],\r\n      parentNode: {\r\n        childNode: {}\r\n      },\r\n      parentNodes: [{ id: 0 }, { id: 1 }],\r\n      updateTree: {\r\n        text: \"root\",\r\n        children: [\r\n          {\r\n            text: \"child 1\",\r\n            data: {},\r\n            children: [{ text: \"child 1.1\" }]\r\n          },\r\n          {\r\n            text: \"child 2\",\r\n            data: {},\r\n            children: [{ text: \"child 2.1\" }, { text: \"child 2.2\" }]\r\n          }\r\n        ]\r\n      },\r\n      usingIfToUpdate: {\r\n        value: 1\r\n      },\r\n      usingUnlessToUpdate: {\r\n        dataLoaded: false\r\n      },\r\n      usingSwitchToUpdate1: 1,\r\n      usingSwitchToUpdate2: {\r\n        value: true\r\n      },\r\n      usingFilter: [1, 2, 3, 4, 5]\r\n    };\r\n    const specs = {\r\n      // you can change separator by using configure({ separator: /pattern/ })\r\n      \"a.b.c.d.e.f\": [$set, 100],\r\n      \"a.b.c.d.e\": [$set, \"newProp\", 100],\r\n      arrayPush: [$push, 1, 2, 3, 4, 5],\r\n      objMerge: [$assign, { age: 20 }, { school: \"A\" }],\r\n      // using obj method as modifier\r\n      sqrt(x) {\r\n        return Math.sqrt(x);\r\n      },\r\n      // toggle property itself\r\n      toggleMe: [$toggle],\r\n      // toggle child properties\r\n      toggleMyProp: [$toggle, \"done\", \"completed\"],\r\n      unsetMyProp: [$unset, \"data1\", \"data2\"],\r\n      removeSecond: [$splice, 1, 1],\r\n      // remove array items by its value\r\n      removeAppleAndBanana: [$remove, \"Apple\", \"Banana\"],\r\n      // using sub spec to update all array items\r\n      // sub spec syntax [spec]\r\n      // spec can be [action, ...args] or spec tree { a: {  b: ....} }\r\n      doubleItems: [[x => x * 2]],\r\n      // use action name instead of function\r\n      swapItems: [\"swap\", 0, 1],\r\n      // using sub spec to update all obj values\r\n      increaseProps: [[x => x + 1]],\r\n      removeByIndexes: [\"removeAt\", 3, 1],\r\n      batchProcessing: [\"batch\", [\"set\", \"name\", \"Peter\"], [\"set\", \"age\", 20]],\r\n      pipeProcessing: [\"batch\", x => x.toUpperCase(), x => x + \" WORLD!!!\"],\r\n      //  apply sub spec for only odd numbers\r\n      doubleOddNumbers: [[x => x * 2], x => x % 2],\r\n      parentNode: {\r\n        // remove childNode its self from parentNode\r\n        childNode: [\"unset\"]\r\n      },\r\n      // remove item at index 1 from parentNodes array\r\n      parentNodes: {\r\n        1: [\"unset\"]\r\n      },\r\n      updateTree: {\r\n        // using conditional spec to update all nodes which has text prop, exclude all data nodes\r\n        \"?\": [node => node && node.text, [\"set\", \"done\", true]],\r\n        // do same thing with pattern matching\r\n        \"?/text/i\": [\"set\", \"deleted\", true],\r\n        children: {\r\n          // using diff spec for each node\r\n          \"?\"(node, prop) {\r\n            if (node && node.text) {\r\n              return prop % 2 === 0\r\n                ? [\"set\", \"isEven\", true]\r\n                : [\"set\", \"isOdd\", true];\r\n            }\r\n            return undefined;\r\n          }\r\n        }\r\n      },\r\n      usingIfToUpdate: [\r\n        \"if\",\r\n        x => x % 2 === 0,\r\n        [\"set\", \"isEven\", true],\r\n        [\"set\", \"isOdd\", true]\r\n      ],\r\n      usingUnlessToUpdate: [\r\n        \"unless\",\r\n        x => x.dataLoaded,\r\n        [\"set\", \"text\", \"loading...\"]\r\n      ],\r\n      usingSwitchToUpdate1: [\r\n        \"switch\",\r\n        {\r\n          1: [\"set\", \"one\"],\r\n          2: [\"set\", \"two\"],\r\n          default: [\"set\", \"other\"]\r\n        }\r\n      ],\r\n      usingSwitchToUpdate2: [\r\n        \"switch\",\r\n        x => (x.value ? \"male\" : \"female\"),\r\n        {\r\n          male: [\"set\", \"sex\", \"male\"],\r\n          default: [\"set\", \"sex\", \"female\"]\r\n        }\r\n      ],\r\n      usingFilter: ['filter', x => x % 2 === 0]\r\n    };\r\n    const result = update(original, specs);\r\n\r\n    expect(result).not.toBe(original);\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: 100,\r\n                newProp: 100\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [1, 2, 3, 4, 5],\r\n      objMerge: {\r\n        name: \"Peter\",\r\n        age: 20,\r\n        school: \"A\"\r\n      },\r\n      toggleMe: true,\r\n      toggleMyProp: {\r\n        done: true,\r\n        completed: false\r\n      },\r\n      unsetMyProp: {},\r\n      sqrt: 10,\r\n      removeSecond: [1, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\"],\r\n      doubleItems: [2, 4, 6, 8, 10, 12, 14, 16],\r\n      swapItems: [\"right\", \"left\"],\r\n      increaseProps: {\r\n        one: 2,\r\n        two: 3,\r\n        three: 4\r\n      },\r\n      removeByIndexes: [1, 3],\r\n      batchProcessing: {\r\n        name: \"Peter\",\r\n        age: 20\r\n      },\r\n      pipeProcessing: \"HELLO WORLD!!!\",\r\n      doubleOddNumbers: [2, 2, 6, 4],\r\n      parentNode: {},\r\n      parentNodes: [{ id: 0 }],\r\n      updateTree: {\r\n        text: \"root\",\r\n        children: [\r\n          {\r\n            text: \"child 1\",\r\n            done: true,\r\n            deleted: true,\r\n            isEven: true,\r\n            data: {},\r\n            children: [\r\n              { text: \"child 1.1\", done: true, deleted: true, isEven: true }\r\n            ]\r\n          },\r\n          {\r\n            text: \"child 2\",\r\n            done: true,\r\n            deleted: true,\r\n            isOdd: true,\r\n            data: {},\r\n            children: [\r\n              { text: \"child 2.1\", done: true, deleted: true, isEven: true },\r\n              { text: \"child 2.2\", done: true, deleted: true, isOdd: true }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      usingIfToUpdate: {\r\n        value: 1,\r\n        isOdd: true\r\n      },\r\n      usingUnlessToUpdate: {\r\n        dataLoaded: false,\r\n        text: \"loading...\"\r\n      },\r\n      usingSwitchToUpdate1: \"one\",\r\n      usingSwitchToUpdate2: {\r\n        value: true,\r\n        sex: \"male\"\r\n      },\r\n      usingFilter: [2, 4]\r\n    });\r\n  });\r\n\r\n  it(\"typescript api, selector proxy and modifier\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      [x => x.a.b.c, \"push\", 1, 2, 3],\r\n      [x => x.a.b, \"set\", \"name\", \"Peter\"]\r\n    );\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"sub spec for root\", function() {\r\n    const original = [1, 2, 3, 4, 5];\r\n    const result = update(original, [\"push\", 1]);\r\n\r\n    expect(result).toEqual([1, 2, 3, 4, 5, 1]);\r\n  });\r\n\r\n  it(\"sub spec for root\", function() {\r\n    const original = [1, 2, 3, 4, 5];\r\n    const result = update(original, [[x => x * 2]]);\r\n\r\n    expect(result).toEqual([2, 4, 6, 8, 10]);\r\n  });\r\n\r\n  it(\"typescript api, proxy only\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      x => x.a.b.c.push(1, 2, 3),\r\n      x => (x.a.b.name = \"Peter\")\r\n    );\r\n\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"update\", function() {\r\n  describe(\"$push\", function() {\r\n    const push7 = [$push, 7];\r\n    const original = [1];\r\n\r\n    it(\"pushes\", function() {\r\n      expect(update(original, push7)).toEqual([1, 7]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, push7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$push])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$unshift\", function() {\r\n    const unshift7 = [$unshift, 7];\r\n    const original = [1];\r\n    it(\"unshifts\", function() {\r\n      expect(update(original, unshift7)).toEqual([7, 1]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, unshift7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$unshift])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$splice\", function() {\r\n    const original = [1, 4, 3];\r\n    const spliceData = [$splice, 1, 1, 2];\r\n    it(\"splices\", function() {\r\n      expect(update(original, spliceData)).toEqual([1, 2, 3]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, spliceData);\r\n      expect(original).toEqual([1, 4, 3]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$splice])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$assign\", function() {\r\n    const original = { a: \"b\" };\r\n    const mergeData = [$assign, { c: \"d\" }];\r\n    it(\"merges\", function() {\r\n      expect(update(original, mergeData)).toEqual({\r\n        a: \"b\",\r\n        c: \"d\"\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, mergeData);\r\n      expect(original).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: { c: true } } };\r\n      expect(update(original, { a: [$assign] })).toBe(original);\r\n      expect(update(original, { a: [$assign, { b: original.a.b }] })).toBe(\r\n        original\r\n      );\r\n\r\n      // Merging primatives of the same value should return the original.\r\n      expect(update(original, { a: { b: [$assign, { c: true }] } })).toBe(\r\n        original\r\n      );\r\n\r\n      // Two objects are different values even though they are deeply equal.\r\n      expect(update(original, { a: [$assign, { b: { c: true } }] })).not.toBe(\r\n        original\r\n      );\r\n      expect(\r\n        update(original, {\r\n          a: [$assign, { b: original.a.b, c: false }]\r\n        })\r\n      ).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$set\", function() {\r\n    it(\"sets\", function() {\r\n      expect(update({ a: \"b\" }, [$set, { c: \"d\" }])).toEqual({ c: \"d\" });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: \"b\" };\r\n      update(obj, [$set, { c: \"d\" }]);\r\n      expect(obj).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, { a: [$set, 1] })).toBe(original);\r\n      expect(update(original, { a: [$set, 2] })).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$toggle\", function() {\r\n    const original = { a: false, b: true };\r\n    const toggleData = [$toggle, \"a\", \"b\"];\r\n    it(\"toggles false to true and true to false\", function() {\r\n      expect(update(original, toggleData)).toEqual({\r\n        a: true,\r\n        b: false\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: false };\r\n      update(obj, [$toggle, \"a\"]);\r\n      expect(obj).toEqual({ a: false });\r\n    });\r\n  });\r\n\r\n  describe(\"$unset\", function() {\r\n    it(\"unsets\", function() {\r\n      expect(update({ a: \"b\" }, [$unset, \"a\"]).a).toBe(undefined);\r\n    });\r\n    it(\"removes the key from the object\", function() {\r\n      const removed = update({ a: \"b\" }, [$unset, \"a\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n    });\r\n    it(\"removes multiple keys from the object\", function() {\r\n      const original = { a: \"b\", c: \"d\", e: \"f\" };\r\n      const removed = update(original, [$unset, \"a\", \"e\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n      expect(\"a\" in original).toBe(true);\r\n      expect(\"e\" in removed).toBe(false);\r\n      expect(\"e\" in original).toBe(true);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, [$unset, \"b\"])).toBe(original);\r\n      expect(update(original, [$unset, \"a\"])).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"deep update\", function() {\r\n    it(\"works\", function() {\r\n      expect(\r\n        update(\r\n          {\r\n            a: \"b\",\r\n            c: {\r\n              d: \"e\",\r\n              f: [1],\r\n              g: [2],\r\n              h: [3],\r\n              i: { j: \"k\" },\r\n              l: 4,\r\n              m: \"n\"\r\n            }\r\n          },\r\n          {\r\n            c: {\r\n              d: [$set, \"m\"],\r\n              f: [$push, 5],\r\n              g: [$unshift, 6],\r\n              h: [$splice, 0, 1, 7],\r\n              i: [$assign, { n: \"o\" }],\r\n              l: [x => x * 2],\r\n              m: [x => x + x]\r\n            }\r\n          }\r\n        )\r\n      ).toEqual({\r\n        a: \"b\",\r\n        c: {\r\n          d: \"m\",\r\n          f: [1, 5],\r\n          g: [6, 2],\r\n          h: [7],\r\n          i: { j: \"k\", n: \"o\" },\r\n          l: 8,\r\n          m: \"nn\"\r\n        }\r\n      });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: 1 }, c: { d: { e: 1 } } };\r\n\r\n      expect(update(original, { a: { b: [$set, 1] } })).toBe(original);\r\n      expect(update(original, { a: { b: [$set, 1] } }).a).toBe(original.a);\r\n\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } })).toBe(original);\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c).toBe(\r\n        original.c\r\n      );\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c.d).toBe(\r\n        original.c.d\r\n      );\r\n\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        })\r\n      ).toBe(original);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).a\r\n      ).toBe(original.a);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c\r\n      ).toBe(original.c);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c.d\r\n      ).toBe(original.c.d);\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } })).not.toBe(original);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a).not.toBe(original.a);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a.b).not.toBe(\r\n        original.a.b\r\n      );\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } }).c).toBe(original.c);\r\n      expect(update(original, { a: { b: [$set, 2] } }).c.d).toBe(original.c.d);\r\n    });\r\n  });\r\n\r\n  it(\"should accept array spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }] });\r\n  });\r\n\r\n  it(\"should accept object spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }, { a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }, { a: 1 }] });\r\n  });\r\n});\r\n"]}