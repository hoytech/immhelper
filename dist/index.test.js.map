{"version":3,"sources":["../index.test.js"],"names":["describe","it","original","a","b","c","d","e","f","arrayPush","objMerge","name","toggleMe","toggleMyProp","done","completed","removeSecond","removeAppleAndBanana","unsetMyProp","data1","Date","data2","sqrt","doubleItems","swapItems","increaseProps","one","two","three","specs","$set","$push","$merge","age","school","Math","x","$toggle","$unset","$splice","$remove","result","expect","not","toBe","toEqual","newProp","push7","unshift7","$unshift","spliceData","mergeData","obj","toggleData","undefined","removed","g","h","i","j","l","m","n","value","modified"],"mappings":"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","file":"index.test.js","sourcesContent":["import {\r\n  update,\r\n  $push,\r\n  $unshift,\r\n  $splice,\r\n  $merge,\r\n  $toggle,\r\n  $unset,\r\n  $set,\r\n  $remove\r\n} from './index';\r\n\r\ndescribe('samples', function() {\r\n  it('all api', function() {\r\n    const original = {\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [],\r\n      objMerge: {\r\n        name: 'Peter'\r\n      },\r\n      toggleMe: false,\r\n      toggleMyProp: {\r\n        done: false,\r\n        completed: true\r\n      },\r\n      removeSecond: [1, 2, 3, 4],\r\n      removeAppleAndBanana: ['Orange', 'Apple', 'Banana'],\r\n      unsetMyProp: {\r\n        data1: new Date(),\r\n        data2: true\r\n      },\r\n      sqrt: 100,\r\n      doubleItems: [1, 2, 3, 4, 5, 6, 7, 8],\r\n      swapItems: ['left', 'right'],\r\n      increaseProps: {\r\n        one: 1,\r\n        two: 2,\r\n        three: 3\r\n      }\r\n    };\r\n    const specs = {\r\n      'a.b.c.d.e.f': [$set, 100],\r\n      'a.b.c.d.e': [$set, 'newProp', 100],\r\n      arrayPush: [$push, 1, 2, 3, 4, 5],\r\n      objMerge: [$merge, { age: 20 }, { school: 'A' }],\r\n      sqrt: [x => Math.sqrt(x)],\r\n      toggleMe: [$toggle],\r\n      toggleMyProp: [$toggle, 'done', 'completed'],\r\n      unsetMyProp: [$unset, 'data1', 'data2'],\r\n      removeSecond: [$splice, 1, 1],\r\n      removeAppleAndBanana: [$remove, 'Apple', 'Banana'],\r\n      doubleItems: [[x => x * 2]],\r\n      swapItems: ['swap', 0, 1],\r\n      increaseProps: [[x => x + 1]]\r\n    };\r\n    const result = update(original, specs);\r\n\r\n    expect(result).not.toBe(original);\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: 100,\r\n                newProp: 100\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [1, 2, 3, 4, 5],\r\n      objMerge: {\r\n        name: 'Peter',\r\n        age: 20,\r\n        school: 'A'\r\n      },\r\n      toggleMe: true,\r\n      toggleMyProp: {\r\n        done: true,\r\n        completed: false\r\n      },\r\n      unsetMyProp: {},\r\n      sqrt: 10,\r\n      removeSecond: [1, 3, 4],\r\n      removeAppleAndBanana: ['Orange'],\r\n      doubleItems: [2, 4, 6, 8, 10, 12, 14, 16],\r\n      swapItems: ['right', 'left'],\r\n      increaseProps: {\r\n        one: 2,\r\n        two: 3,\r\n        three: 4\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('update', function() {\r\n  describe('$push', function() {\r\n    const push7 = [$push, 7];\r\n    const original = [1];\r\n\r\n    it('pushes', function() {\r\n      expect(update(original, push7)).toEqual([1, 7]);\r\n    });\r\n    it('does not mutate the original object', function() {\r\n      update(original, push7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n\r\n    it('keeps reference equality when possible', function() {\r\n      expect(update(original, [$push])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe('$unshift', function() {\r\n    const unshift7 = [$unshift, 7];\r\n    const original = [1];\r\n    it('unshifts', function() {\r\n      expect(update(original, unshift7)).toEqual([7, 1]);\r\n    });\r\n    it('does not mutate the original object', function() {\r\n      update(original, unshift7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n    it('keeps reference equality when possible', function() {\r\n      expect(update(original, [$unshift])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe('$splice', function() {\r\n    const original = [1, 4, 3];\r\n    const spliceData = [$splice, 1, 1, 2];\r\n    it('splices', function() {\r\n      expect(update(original, spliceData)).toEqual([1, 2, 3]);\r\n    });\r\n    it('does not mutate the original object', function() {\r\n      update(original, spliceData);\r\n      expect(original).toEqual([1, 4, 3]);\r\n    });\r\n\r\n    it('keeps reference equality when possible', function() {\r\n      expect(update(original, [$splice])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe('$merge', function() {\r\n    const original = { a: 'b' };\r\n    const mergeData = [$merge, { c: 'd' }];\r\n    it('merges', function() {\r\n      expect(update(original, mergeData)).toEqual({\r\n        a: 'b',\r\n        c: 'd'\r\n      });\r\n    });\r\n    it('does not mutate the original object', function() {\r\n      update(original, mergeData);\r\n      expect(original).toEqual({ a: 'b' });\r\n    });\r\n    it('keeps reference equality when possible', function() {\r\n      const original = { a: { b: { c: true } } };\r\n      expect(update(original, { a: [$merge] })).toBe(original);\r\n      expect(update(original, { a: [$merge, { b: original.a.b }] })).toBe(\r\n        original\r\n      );\r\n\r\n      // Merging primatives of the same value should return the original.\r\n      expect(update(original, { a: { b: [$merge, { c: true }] } })).toBe(\r\n        original\r\n      );\r\n\r\n      // Two objects are different values even though they are deeply equal.\r\n      expect(update(original, { a: [$merge, { b: { c: true } }] })).not.toBe(\r\n        original\r\n      );\r\n      expect(\r\n        update(original, {\r\n          a: [$merge, { b: original.a.b, c: false }]\r\n        })\r\n      ).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe('$set', function() {\r\n    it('sets', function() {\r\n      expect(update({ a: 'b' }, [$set, { c: 'd' }])).toEqual({ c: 'd' });\r\n    });\r\n    it('does not mutate the original object', function() {\r\n      const obj = { a: 'b' };\r\n      update(obj, [$set, { c: 'd' }]);\r\n      expect(obj).toEqual({ a: 'b' });\r\n    });\r\n    it('keeps reference equality when possible', function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, { a: [$set, 1] })).toBe(original);\r\n      expect(update(original, { a: [$set, 2] })).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe('$toggle', function() {\r\n    const original = { a: false, b: true };\r\n    const toggleData = [$toggle, 'a', 'b'];\r\n    it('toggles false to true and true to false', function() {\r\n      expect(update(original, toggleData)).toEqual({\r\n        a: true,\r\n        b: false\r\n      });\r\n    });\r\n    it('does not mutate the original object', function() {\r\n      const obj = { a: false };\r\n      update(obj, [$toggle, 'a']);\r\n      expect(obj).toEqual({ a: false });\r\n    });\r\n  });\r\n\r\n  describe('$unset', function() {\r\n    it('unsets', function() {\r\n      expect(update({ a: 'b' }, [$unset, 'a']).a).toBe(undefined);\r\n    });\r\n    it('removes the key from the object', function() {\r\n      const removed = update({ a: 'b' }, [$unset, 'a']);\r\n      expect('a' in removed).toBe(false);\r\n    });\r\n    it('removes multiple keys from the object', function() {\r\n      const original = { a: 'b', c: 'd', e: 'f' };\r\n      const removed = update(original, [$unset, 'a', 'e']);\r\n      expect('a' in removed).toBe(false);\r\n      expect('a' in original).toBe(true);\r\n      expect('e' in removed).toBe(false);\r\n      expect('e' in original).toBe(true);\r\n    });\r\n\r\n    it('keeps reference equality when possible', function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, [$unset, 'b'])).toBe(original);\r\n      expect(update(original, [$unset, 'a'])).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe('deep update', function() {\r\n    it('works', function() {\r\n      expect(\r\n        update(\r\n          {\r\n            a: 'b',\r\n            c: {\r\n              d: 'e',\r\n              f: [1],\r\n              g: [2],\r\n              h: [3],\r\n              i: { j: 'k' },\r\n              l: 4,\r\n              m: 'n'\r\n            }\r\n          },\r\n          {\r\n            c: {\r\n              d: [$set, 'm'],\r\n              f: [$push, 5],\r\n              g: [$unshift, 6],\r\n              h: [$splice, 0, 1, 7],\r\n              i: [$merge, { n: 'o' }],\r\n              l: [x => x * 2],\r\n              m: [x => x + x]\r\n            }\r\n          }\r\n        )\r\n      ).toEqual({\r\n        a: 'b',\r\n        c: {\r\n          d: 'm',\r\n          f: [1, 5],\r\n          g: [6, 2],\r\n          h: [7],\r\n          i: { j: 'k', n: 'o' },\r\n          l: 8,\r\n          m: 'nn'\r\n        }\r\n      });\r\n    });\r\n    it('keeps reference equality when possible', function() {\r\n      const original = { a: { b: 1 }, c: { d: { e: 1 } } };\r\n\r\n      expect(update(original, { a: { b: [$set, 1] } })).toBe(original);\r\n      expect(update(original, { a: { b: [$set, 1] } }).a).toBe(original.a);\r\n\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } })).toBe(original);\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c).toBe(\r\n        original.c\r\n      );\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c.d).toBe(\r\n        original.c.d\r\n      );\r\n\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        })\r\n      ).toBe(original);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).a\r\n      ).toBe(original.a);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c\r\n      ).toBe(original.c);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c.d\r\n      ).toBe(original.c.d);\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } })).not.toBe(original);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a).not.toBe(original.a);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a.b).not.toBe(\r\n        original.a.b\r\n      );\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } }).c).toBe(original.c);\r\n      expect(update(original, { a: { b: [$set, 2] } }).c.d).toBe(original.c.d);\r\n    });\r\n  });\r\n\r\n  it('should accept array spec to modify arrays', function() {\r\n    const original = { value: [{ a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }] });\r\n  });\r\n\r\n  it('should accept object spec to modify arrays', function() {\r\n    const original = { value: [{ a: 0 }, { a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }, { a: 1 }] });\r\n  });\r\n});\r\n"]}