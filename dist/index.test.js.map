{"version":3,"sources":["../index.test.js"],"names":["describe","it","original","a","b","c","d","e","f","arrayPush","objMerge","name","toggleMe","toggleMyProp","done","completed","removeSecond","removeAppleAndBanana","unsetMyProp","data1","Date","data2","sqrt","doubleItems","swapItems","increaseProps","one","two","three","removeByIndexes","batchProcessing","pipeProcessing","specs","$set","$push","$assign","age","school","x","Math","$toggle","$unset","$splice","$remove","toUpperCase","result","expect","not","toBe","toEqual","newProp","push","push7","unshift7","$unshift","spliceData","mergeData","obj","toggleData","undefined","removed","g","h","i","j","l","m","n","value","modified"],"mappings":"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","file":"index.test.js","sourcesContent":["import {\r\n  update,\r\n  updatePath,\r\n  $push,\r\n  $unshift,\r\n  $splice,\r\n  $assign,\r\n  $toggle,\r\n  $unset,\r\n  $set,\r\n  $remove\r\n} from \"./index\";\r\n\r\ndescribe(\"samples\", function() {\r\n  it(\"all api\", function() {\r\n    const original = {\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [],\r\n      objMerge: {\r\n        name: \"Peter\"\r\n      },\r\n      toggleMe: false,\r\n      toggleMyProp: {\r\n        done: false,\r\n        completed: true\r\n      },\r\n      removeSecond: [1, 2, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\", \"Apple\", \"Banana\"],\r\n      unsetMyProp: {\r\n        data1: new Date(),\r\n        data2: true\r\n      },\r\n      sqrt: 100,\r\n      doubleItems: [1, 2, 3, 4, 5, 6, 7, 8],\r\n      swapItems: [\"left\", \"right\"],\r\n      increaseProps: {\r\n        one: 1,\r\n        two: 2,\r\n        three: 3\r\n      },\r\n      removeByIndexes: [1, 2, 3, 4],\r\n      batchProcessing: {},\r\n      pipeProcessing: 'hello'\r\n    };\r\n    const specs = {\r\n      // you can change separator by using configure({ separator: /pattern/ })\r\n      \"a.b.c.d.e.f\": [$set, 100],\r\n      \"a.b.c.d.e\": [$set, \"newProp\", 100],\r\n      arrayPush: [$push, 1, 2, 3, 4, 5],\r\n      objMerge: [$assign, { age: 20 }, { school: \"A\" }],\r\n      // using obj method as modifier\r\n      sqrt(x) {\r\n        return Math.sqrt(x);\r\n      },\r\n      // toggle property itself\r\n      toggleMe: [$toggle],\r\n      // toggle child properties\r\n      toggleMyProp: [$toggle, \"done\", \"completed\"],\r\n      unsetMyProp: [$unset, \"data1\", \"data2\"],\r\n      removeSecond: [$splice, 1, 1],\r\n      // remove array items by its value\r\n      removeAppleAndBanana: [$remove, \"Apple\", \"Banana\"],\r\n      // using sub spec to update all array items\r\n      // sub spec syntax [spec]\r\n      // spec can be [action, ...args] or spec tree { a: {  b: ....} }\r\n      doubleItems: [[x => x * 2]],\r\n      // use action name instead of function\r\n      swapItems: [\"swap\", 0, 1],\r\n      // using sub spec to update all obj values\r\n      increaseProps: [[x => x + 1]],\r\n      removeByIndexes: [\"removeAt\", 3, 1],\r\n      batchProcessing: [\"batch\", [\"set\", \"name\", \"Peter\"], [\"set\", \"age\", 20]],\r\n      pipeProcessing: ['batch', x => x.toUpperCase(), x => x + ' WORLD!!!']\r\n    };\r\n    const result = update(original, specs);\r\n\r\n    expect(result).not.toBe(original);\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: 100,\r\n                newProp: 100\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [1, 2, 3, 4, 5],\r\n      objMerge: {\r\n        name: \"Peter\",\r\n        age: 20,\r\n        school: \"A\"\r\n      },\r\n      toggleMe: true,\r\n      toggleMyProp: {\r\n        done: true,\r\n        completed: false\r\n      },\r\n      unsetMyProp: {},\r\n      sqrt: 10,\r\n      removeSecond: [1, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\"],\r\n      doubleItems: [2, 4, 6, 8, 10, 12, 14, 16],\r\n      swapItems: [\"right\", \"left\"],\r\n      increaseProps: {\r\n        one: 2,\r\n        two: 3,\r\n        three: 4\r\n      },\r\n      removeByIndexes: [1, 3],\r\n      batchProcessing: {\r\n        name: \"Peter\",\r\n        age: 20\r\n      },\r\n      pipeProcessing: 'HELLO WORLD!!!'\r\n    });\r\n  });\r\n\r\n  it(\"typescript api, selector proxy and modifier\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      [x => x.a.b.c, \"push\", 1, 2, 3],\r\n      [x => x.a.b, \"set\", \"name\", \"Peter\"]\r\n    );\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"typescript api, proxy only\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      x => x.a.b.c.push(1, 2, 3),\r\n      x => (x.a.b.name = \"Peter\")\r\n    );\r\n\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"update\", function() {\r\n  describe(\"$push\", function() {\r\n    const push7 = [$push, 7];\r\n    const original = [1];\r\n\r\n    it(\"pushes\", function() {\r\n      expect(update(original, push7)).toEqual([1, 7]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, push7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$push])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$unshift\", function() {\r\n    const unshift7 = [$unshift, 7];\r\n    const original = [1];\r\n    it(\"unshifts\", function() {\r\n      expect(update(original, unshift7)).toEqual([7, 1]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, unshift7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$unshift])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$splice\", function() {\r\n    const original = [1, 4, 3];\r\n    const spliceData = [$splice, 1, 1, 2];\r\n    it(\"splices\", function() {\r\n      expect(update(original, spliceData)).toEqual([1, 2, 3]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, spliceData);\r\n      expect(original).toEqual([1, 4, 3]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$splice])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$assign\", function() {\r\n    const original = { a: \"b\" };\r\n    const mergeData = [$assign, { c: \"d\" }];\r\n    it(\"merges\", function() {\r\n      expect(update(original, mergeData)).toEqual({\r\n        a: \"b\",\r\n        c: \"d\"\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, mergeData);\r\n      expect(original).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: { c: true } } };\r\n      expect(update(original, { a: [$assign] })).toBe(original);\r\n      expect(update(original, { a: [$assign, { b: original.a.b }] })).toBe(\r\n        original\r\n      );\r\n\r\n      // Merging primatives of the same value should return the original.\r\n      expect(update(original, { a: { b: [$assign, { c: true }] } })).toBe(\r\n        original\r\n      );\r\n\r\n      // Two objects are different values even though they are deeply equal.\r\n      expect(update(original, { a: [$assign, { b: { c: true } }] })).not.toBe(\r\n        original\r\n      );\r\n      expect(\r\n        update(original, {\r\n          a: [$assign, { b: original.a.b, c: false }]\r\n        })\r\n      ).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$set\", function() {\r\n    it(\"sets\", function() {\r\n      expect(update({ a: \"b\" }, [$set, { c: \"d\" }])).toEqual({ c: \"d\" });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: \"b\" };\r\n      update(obj, [$set, { c: \"d\" }]);\r\n      expect(obj).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, { a: [$set, 1] })).toBe(original);\r\n      expect(update(original, { a: [$set, 2] })).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$toggle\", function() {\r\n    const original = { a: false, b: true };\r\n    const toggleData = [$toggle, \"a\", \"b\"];\r\n    it(\"toggles false to true and true to false\", function() {\r\n      expect(update(original, toggleData)).toEqual({\r\n        a: true,\r\n        b: false\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: false };\r\n      update(obj, [$toggle, \"a\"]);\r\n      expect(obj).toEqual({ a: false });\r\n    });\r\n  });\r\n\r\n  describe(\"$unset\", function() {\r\n    it(\"unsets\", function() {\r\n      expect(update({ a: \"b\" }, [$unset, \"a\"]).a).toBe(undefined);\r\n    });\r\n    it(\"removes the key from the object\", function() {\r\n      const removed = update({ a: \"b\" }, [$unset, \"a\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n    });\r\n    it(\"removes multiple keys from the object\", function() {\r\n      const original = { a: \"b\", c: \"d\", e: \"f\" };\r\n      const removed = update(original, [$unset, \"a\", \"e\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n      expect(\"a\" in original).toBe(true);\r\n      expect(\"e\" in removed).toBe(false);\r\n      expect(\"e\" in original).toBe(true);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, [$unset, \"b\"])).toBe(original);\r\n      expect(update(original, [$unset, \"a\"])).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"deep update\", function() {\r\n    it(\"works\", function() {\r\n      expect(\r\n        update(\r\n          {\r\n            a: \"b\",\r\n            c: {\r\n              d: \"e\",\r\n              f: [1],\r\n              g: [2],\r\n              h: [3],\r\n              i: { j: \"k\" },\r\n              l: 4,\r\n              m: \"n\"\r\n            }\r\n          },\r\n          {\r\n            c: {\r\n              d: [$set, \"m\"],\r\n              f: [$push, 5],\r\n              g: [$unshift, 6],\r\n              h: [$splice, 0, 1, 7],\r\n              i: [$assign, { n: \"o\" }],\r\n              l: [x => x * 2],\r\n              m: [x => x + x]\r\n            }\r\n          }\r\n        )\r\n      ).toEqual({\r\n        a: \"b\",\r\n        c: {\r\n          d: \"m\",\r\n          f: [1, 5],\r\n          g: [6, 2],\r\n          h: [7],\r\n          i: { j: \"k\", n: \"o\" },\r\n          l: 8,\r\n          m: \"nn\"\r\n        }\r\n      });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: 1 }, c: { d: { e: 1 } } };\r\n\r\n      expect(update(original, { a: { b: [$set, 1] } })).toBe(original);\r\n      expect(update(original, { a: { b: [$set, 1] } }).a).toBe(original.a);\r\n\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } })).toBe(original);\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c).toBe(\r\n        original.c\r\n      );\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c.d).toBe(\r\n        original.c.d\r\n      );\r\n\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        })\r\n      ).toBe(original);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).a\r\n      ).toBe(original.a);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c\r\n      ).toBe(original.c);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c.d\r\n      ).toBe(original.c.d);\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } })).not.toBe(original);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a).not.toBe(original.a);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a.b).not.toBe(\r\n        original.a.b\r\n      );\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } }).c).toBe(original.c);\r\n      expect(update(original, { a: { b: [$set, 2] } }).c.d).toBe(original.c.d);\r\n    });\r\n  });\r\n\r\n  it(\"should accept array spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }] });\r\n  });\r\n\r\n  it(\"should accept object spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }, { a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }, { a: 1 }] });\r\n  });\r\n});\r\n"]}