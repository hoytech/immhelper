{"version":3,"sources":["../index.test.js"],"names":["describe","it","original","a","b","c","d","e","f","arrayPush","objMerge","name","toggleMe","toggleMyProp","done","completed","removeSecond","removeAppleAndBanana","unsetMyProp","data1","Date","data2","sqrt","doubleItems","swapItems","increaseProps","one","two","three","removeByIndexes","batchProcessing","pipeProcessing","doubleOddNumbers","parentNode","childNode","specs","$set","$push","$assign","age","school","x","Math","$toggle","$unset","$splice","$remove","toUpperCase","result","expect","not","toBe","toEqual","newProp","push","push7","unshift7","$unshift","spliceData","mergeData","obj","toggleData","undefined","removed","g","h","i","j","l","m","n","value","modified"],"mappings":"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","file":"index.test.js","sourcesContent":["import {\r\n  update,\r\n  updatePath,\r\n  $push,\r\n  $unshift,\r\n  $splice,\r\n  $assign,\r\n  $toggle,\r\n  $unset,\r\n  $set,\r\n  $remove\r\n} from \"./index\";\r\n\r\ndescribe(\"samples\", function() {\r\n  it(\"all api\", function() {\r\n    const original = {\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [],\r\n      objMerge: {\r\n        name: \"Peter\"\r\n      },\r\n      toggleMe: false,\r\n      toggleMyProp: {\r\n        done: false,\r\n        completed: true\r\n      },\r\n      removeSecond: [1, 2, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\", \"Apple\", \"Banana\"],\r\n      unsetMyProp: {\r\n        data1: new Date(),\r\n        data2: true\r\n      },\r\n      sqrt: 100,\r\n      doubleItems: [1, 2, 3, 4, 5, 6, 7, 8],\r\n      swapItems: [\"left\", \"right\"],\r\n      increaseProps: {\r\n        one: 1,\r\n        two: 2,\r\n        three: 3\r\n      },\r\n      removeByIndexes: [1, 2, 3, 4],\r\n      batchProcessing: {},\r\n      pipeProcessing: \"hello\",\r\n      doubleOddNumbers: [1, 2, 3, 4],\r\n      parentNode: {\r\n        childNode: {}\r\n      }\r\n    };\r\n    const specs = {\r\n      // you can change separator by using configure({ separator: /pattern/ })\r\n      \"a.b.c.d.e.f\": [$set, 100],\r\n      \"a.b.c.d.e\": [$set, \"newProp\", 100],\r\n      arrayPush: [$push, 1, 2, 3, 4, 5],\r\n      objMerge: [$assign, { age: 20 }, { school: \"A\" }],\r\n      // using obj method as modifier\r\n      sqrt(x) {\r\n        return Math.sqrt(x);\r\n      },\r\n      // toggle property itself\r\n      toggleMe: [$toggle],\r\n      // toggle child properties\r\n      toggleMyProp: [$toggle, \"done\", \"completed\"],\r\n      unsetMyProp: [$unset, \"data1\", \"data2\"],\r\n      removeSecond: [$splice, 1, 1],\r\n      // remove array items by its value\r\n      removeAppleAndBanana: [$remove, \"Apple\", \"Banana\"],\r\n      // using sub spec to update all array items\r\n      // sub spec syntax [spec]\r\n      // spec can be [action, ...args] or spec tree { a: {  b: ....} }\r\n      doubleItems: [[x => x * 2]],\r\n      // use action name instead of function\r\n      swapItems: [\"swap\", 0, 1],\r\n      // using sub spec to update all obj values\r\n      increaseProps: [[x => x + 1]],\r\n      removeByIndexes: [\"removeAt\", 3, 1],\r\n      batchProcessing: [\"batch\", [\"set\", \"name\", \"Peter\"], [\"set\", \"age\", 20]],\r\n      pipeProcessing: [\"batch\", x => x.toUpperCase(), x => x + \" WORLD!!!\"],\r\n      //  apply sub spec for only odd numbers\r\n      doubleOddNumbers: [[x => x * 2], x => x % 2],\r\n      parentNode: {\r\n        // remove childNode its self from parentNode\r\n        childNode: [\"unset\"]\r\n      }\r\n    };\r\n    const result = update(original, specs);\r\n\r\n    expect(result).not.toBe(original);\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          c: {\r\n            d: {\r\n              e: {\r\n                f: 100,\r\n                newProp: 100\r\n              }\r\n            }\r\n          }\r\n        }\r\n      },\r\n      arrayPush: [1, 2, 3, 4, 5],\r\n      objMerge: {\r\n        name: \"Peter\",\r\n        age: 20,\r\n        school: \"A\"\r\n      },\r\n      toggleMe: true,\r\n      toggleMyProp: {\r\n        done: true,\r\n        completed: false\r\n      },\r\n      unsetMyProp: {},\r\n      sqrt: 10,\r\n      removeSecond: [1, 3, 4],\r\n      removeAppleAndBanana: [\"Orange\"],\r\n      doubleItems: [2, 4, 6, 8, 10, 12, 14, 16],\r\n      swapItems: [\"right\", \"left\"],\r\n      increaseProps: {\r\n        one: 2,\r\n        two: 3,\r\n        three: 4\r\n      },\r\n      removeByIndexes: [1, 3],\r\n      batchProcessing: {\r\n        name: \"Peter\",\r\n        age: 20\r\n      },\r\n      pipeProcessing: \"HELLO WORLD!!!\",\r\n      doubleOddNumbers: [2, 2, 6, 4],\r\n      parentNode: {}\r\n    });\r\n  });\r\n\r\n  it(\"typescript api, selector proxy and modifier\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      [x => x.a.b.c, \"push\", 1, 2, 3],\r\n      [x => x.a.b, \"set\", \"name\", \"Peter\"]\r\n    );\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  it(\"typescript api, proxy only\", function() {\r\n    const original = { a: { b: { c: [] } } };\r\n    const result = updatePath(\r\n      original,\r\n      x => x.a.b.c.push(1, 2, 3),\r\n      x => (x.a.b.name = \"Peter\")\r\n    );\r\n\r\n    expect(result).toEqual({\r\n      a: {\r\n        b: {\r\n          name: \"Peter\",\r\n          c: [1, 2, 3]\r\n        }\r\n      }\r\n    });\r\n  });\r\n});\r\n\r\ndescribe(\"update\", function() {\r\n  describe(\"$push\", function() {\r\n    const push7 = [$push, 7];\r\n    const original = [1];\r\n\r\n    it(\"pushes\", function() {\r\n      expect(update(original, push7)).toEqual([1, 7]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, push7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$push])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$unshift\", function() {\r\n    const unshift7 = [$unshift, 7];\r\n    const original = [1];\r\n    it(\"unshifts\", function() {\r\n      expect(update(original, unshift7)).toEqual([7, 1]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, unshift7);\r\n      expect(original).toEqual([1]);\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$unshift])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$splice\", function() {\r\n    const original = [1, 4, 3];\r\n    const spliceData = [$splice, 1, 1, 2];\r\n    it(\"splices\", function() {\r\n      expect(update(original, spliceData)).toEqual([1, 2, 3]);\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, spliceData);\r\n      expect(original).toEqual([1, 4, 3]);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      expect(update(original, [$splice])).toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$assign\", function() {\r\n    const original = { a: \"b\" };\r\n    const mergeData = [$assign, { c: \"d\" }];\r\n    it(\"merges\", function() {\r\n      expect(update(original, mergeData)).toEqual({\r\n        a: \"b\",\r\n        c: \"d\"\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      update(original, mergeData);\r\n      expect(original).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: { c: true } } };\r\n      expect(update(original, { a: [$assign] })).toBe(original);\r\n      expect(update(original, { a: [$assign, { b: original.a.b }] })).toBe(\r\n        original\r\n      );\r\n\r\n      // Merging primatives of the same value should return the original.\r\n      expect(update(original, { a: { b: [$assign, { c: true }] } })).toBe(\r\n        original\r\n      );\r\n\r\n      // Two objects are different values even though they are deeply equal.\r\n      expect(update(original, { a: [$assign, { b: { c: true } }] })).not.toBe(\r\n        original\r\n      );\r\n      expect(\r\n        update(original, {\r\n          a: [$assign, { b: original.a.b, c: false }]\r\n        })\r\n      ).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$set\", function() {\r\n    it(\"sets\", function() {\r\n      expect(update({ a: \"b\" }, [$set, { c: \"d\" }])).toEqual({ c: \"d\" });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: \"b\" };\r\n      update(obj, [$set, { c: \"d\" }]);\r\n      expect(obj).toEqual({ a: \"b\" });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, { a: [$set, 1] })).toBe(original);\r\n      expect(update(original, { a: [$set, 2] })).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"$toggle\", function() {\r\n    const original = { a: false, b: true };\r\n    const toggleData = [$toggle, \"a\", \"b\"];\r\n    it(\"toggles false to true and true to false\", function() {\r\n      expect(update(original, toggleData)).toEqual({\r\n        a: true,\r\n        b: false\r\n      });\r\n    });\r\n    it(\"does not mutate the original object\", function() {\r\n      const obj = { a: false };\r\n      update(obj, [$toggle, \"a\"]);\r\n      expect(obj).toEqual({ a: false });\r\n    });\r\n  });\r\n\r\n  describe(\"$unset\", function() {\r\n    it(\"unsets\", function() {\r\n      expect(update({ a: \"b\" }, [$unset, \"a\"]).a).toBe(undefined);\r\n    });\r\n    it(\"removes the key from the object\", function() {\r\n      const removed = update({ a: \"b\" }, [$unset, \"a\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n    });\r\n    it(\"removes multiple keys from the object\", function() {\r\n      const original = { a: \"b\", c: \"d\", e: \"f\" };\r\n      const removed = update(original, [$unset, \"a\", \"e\"]);\r\n      expect(\"a\" in removed).toBe(false);\r\n      expect(\"a\" in original).toBe(true);\r\n      expect(\"e\" in removed).toBe(false);\r\n      expect(\"e\" in original).toBe(true);\r\n    });\r\n\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: 1 };\r\n      expect(update(original, [$unset, \"b\"])).toBe(original);\r\n      expect(update(original, [$unset, \"a\"])).not.toBe(original);\r\n    });\r\n  });\r\n\r\n  describe(\"deep update\", function() {\r\n    it(\"works\", function() {\r\n      expect(\r\n        update(\r\n          {\r\n            a: \"b\",\r\n            c: {\r\n              d: \"e\",\r\n              f: [1],\r\n              g: [2],\r\n              h: [3],\r\n              i: { j: \"k\" },\r\n              l: 4,\r\n              m: \"n\"\r\n            }\r\n          },\r\n          {\r\n            c: {\r\n              d: [$set, \"m\"],\r\n              f: [$push, 5],\r\n              g: [$unshift, 6],\r\n              h: [$splice, 0, 1, 7],\r\n              i: [$assign, { n: \"o\" }],\r\n              l: [x => x * 2],\r\n              m: [x => x + x]\r\n            }\r\n          }\r\n        )\r\n      ).toEqual({\r\n        a: \"b\",\r\n        c: {\r\n          d: \"m\",\r\n          f: [1, 5],\r\n          g: [6, 2],\r\n          h: [7],\r\n          i: { j: \"k\", n: \"o\" },\r\n          l: 8,\r\n          m: \"nn\"\r\n        }\r\n      });\r\n    });\r\n    it(\"keeps reference equality when possible\", function() {\r\n      const original = { a: { b: 1 }, c: { d: { e: 1 } } };\r\n\r\n      expect(update(original, { a: { b: [$set, 1] } })).toBe(original);\r\n      expect(update(original, { a: { b: [$set, 1] } }).a).toBe(original.a);\r\n\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } })).toBe(original);\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c).toBe(\r\n        original.c\r\n      );\r\n      expect(update(original, { c: { d: { e: [$set, 1] } } }).c.d).toBe(\r\n        original.c.d\r\n      );\r\n\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        })\r\n      ).toBe(original);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).a\r\n      ).toBe(original.a);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c\r\n      ).toBe(original.c);\r\n      expect(\r\n        update(original, {\r\n          a: { b: [$set, 1] },\r\n          c: { d: { e: [$set, 1] } }\r\n        }).c.d\r\n      ).toBe(original.c.d);\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } })).not.toBe(original);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a).not.toBe(original.a);\r\n      expect(update(original, { a: { b: [$set, 2] } }).a.b).not.toBe(\r\n        original.a.b\r\n      );\r\n\r\n      expect(update(original, { a: { b: [$set, 2] } }).c).toBe(original.c);\r\n      expect(update(original, { a: { b: [$set, 2] } }).c.d).toBe(original.c.d);\r\n    });\r\n  });\r\n\r\n  it(\"should accept array spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }] });\r\n  });\r\n\r\n  it(\"should accept object spec to modify arrays\", function() {\r\n    const original = { value: [{ a: 0 }, { a: 0 }] };\r\n    const modified = update(original, { value: [{ a: [$set, 1] }] });\r\n    expect(modified).toEqual({ value: [{ a: 1 }, { a: 1 }] });\r\n  });\r\n});\r\n"]}